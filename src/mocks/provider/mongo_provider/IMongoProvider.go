// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// IMongoProvider is an autogenerated mock type for the IMongoProvider type
type IMongoProvider struct {
	mock.Mock
}

// GetCollection provides a mock function with given fields: dbName, collectionName, timeout
func (_m *IMongoProvider) GetCollection(dbName string, collectionName string, timeout int) (*mongo.Collection, error) {
	ret := _m.Called(dbName, collectionName, timeout)

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func(string, string, int) *mongo.Collection); ok {
		r0 = rf(dbName, collectionName, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(dbName, collectionName, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabase provides a mock function with given fields: dbName, timeout
func (_m *IMongoProvider) GetDatabase(dbName string, timeout int) (*mongo.Database, error) {
	ret := _m.Called(dbName, timeout)

	var r0 *mongo.Database
	if rf, ok := ret.Get(0).(func(string, int) *mongo.Database); ok {
		r0 = rf(dbName, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(dbName, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMongoClient provides a mock function with given fields: timeout
func (_m *IMongoProvider) GetMongoClient(timeout int) (*mongo.Client, error) {
	ret := _m.Called(timeout)

	var r0 *mongo.Client
	if rf, ok := ret.Get(0).(func(int) *mongo.Client); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
